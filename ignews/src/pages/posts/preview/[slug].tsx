// Esse arquivo √© uma subrota da rota de posts, ou seja, pode ser acessado em posts/preview/slug do post

import { GetStaticPaths, GetStaticProps } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { RichText } from "prismic-dom";
import { useEffect } from "react";
import { getPrismicClient } from "../../../services/prismic";
import styles from '../post.module.scss';

interface PostPreviewProps {
  post: {
    slug: string;
    title: string;
    content: string;
    updatedAt: string;
  }
}

export default function PostPreview({ post }: PostPreviewProps) {
  const { data: session} = useSession();
  const router = useRouter();

  useEffect(() => {
    if (session?.activeSubscription) {
      router.push(`/posts/${post.slug}`);
    }
    // router e post.slug n√£o ter√£o seus valores alterados, por isso n√£o precisam estar no array de dep√™ndencias
    // eslint-disable-next-line react-hooks/exhaustive-deps
  },[session]);

  return (
    <>
      <Head>
        <title>{post.title} | ig.news</title>
      </Head>
      <main className={styles.container}>
        <article className={styles.post}>
          <h1>{post.title}</h1>
          <time>{post.updatedAt}</time>
          {/* O dangerouslySetInnerHTML √© utilizado para que o React interprete HTML diretamente, por√©m deve ser usado com cautela por conta das tags de script, podemos usar nesse caso porque o prismic tem tratativa pra isso, passamos pra ele um objeto que tem o __html, que recebe o html */}
          <div className={`${styles.postContent} ${styles.previewContent}`} dangerouslySetInnerHTML={{ __html: post.content }}/>
          <div className={styles.continueReading}>
            Wanna continue reading?
            <Link href="/">
              <a>Subscribe now ü§ó</a>
            </Link>
          </div>
        </article>
      </main>
    </>
  )
}

// √â utilizado em p√°ginas est√°ticas que tem par√¢metros din√¢micos, para que possamos passar p√°ginas que ser√£o geradas de forma est√°tica
export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [
      // As p√°ginas que forem colocadas aqui, s√£o criadas de forma est√°tica durante o build e n√£o no primeiro acesso
    ],
    // Pode receber true (se a p√°gina for acessada, e n√£o tiver sido gerada de forma est√°tica ainda, a tela ser√° aberta, e as requisi√ß√µes ser√£o feitas ap√≥s a tela ter sido carregada, oque gera 2 problemas, ele causa layout shift, aonde a p√°gina √© carregada sem o conte√∫do, e depois o conte√∫do √© carregado com delay e ele n√£o √© muito bom para SEO, porque os posts por√©m n√£o estar dispon√≠veis no acesso dos motores de busca), false (se o post n√£o foi gerado de forma est√°tica ainda, ele retorna 404, e somente isso, pode ser utilizado quando n√£o teremos novos registros, e quando tudo √© gerado de forma est√°tica no momento da build) e blocking (parece com o true, mas quando o conte√∫do que ainda n√£o foi gerado de forma est√°tica tenta ser acessado, ele usa server side rendering, carregando o conte√∫do na camada do Next, pra s√≥ ent√£o mostrar ele em tela, oque corrige os problemas da op√ß√£o true)
    fallback: 'blocking',
  }
}

// Diferente da p√°gina de post completa, essa p√°gina √© publica, por isso pode ser gerada de forma est√°tica
export const getStaticProps: GetStaticProps = async ({ params }) => {
  const { slug } = params;
  const prismic  = getPrismicClient();
  // Como a tipagem do slug e de uma string ou um array, convertemos para string para ter certeza que receberemos uma string
  // O terceiro par√¢metro abaixo √© utilizado para que possamos passar itens adicionais de forma opicional, mas o par√¢metro deve ser passado mesmo que vazio
  const response = await prismic.getByUID<any>('post', String(slug), {});
  const post = {
    slug,
    title: RichText.asText(response.data.title),
    content: RichText.asHtml(response.data.content.splice(0, 3)),
    updatedAt: new Date(response.last_publication_date).toLocaleDateString('pt-BR', { // Formata√ß√£o da data
      day: '2-digit',
      month: 'long',
      year: 'numeric'
    })
  };

  return {
    props: {
      post,
    },
    revalidate: 60 * 30, // 30 minutos
  }  
}
