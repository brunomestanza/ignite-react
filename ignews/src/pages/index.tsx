import { GetStaticProps } from 'next';
import Head  from 'next/head';
import Image from 'next/image';
import { stripe } from '../services/stripe';
import { SubscribeButton } from '../components/SubscribeButton';
import styles from '../styles/home.module.scss';

interface HomeProps {
  product: {
    priceId: string;
    amount: string;
  }
}

export default function Home({ product }: HomeProps) {
  return (
    <>
      {/* Tudo que √© passado dentro deste Head, √© anexado ao _document da aplica√ß√£o, junto as informa√ß√µes que temos l√° */}
      {/* Podemos utilizar isso para SEO, t√≠tulo da p√°gina, e qualquer outra informa√ß√£o */}
      <Head>
        <title>Home | ig.news</title>
      </Head>
      <main className={styles.contentContainer}>
        <section className={styles.hero}>
          <span>üëè Hey, welcome</span>
          <h1>News about the <span>React</span> world.</h1>
          <p>
            Get access to all the publications <br />
            <span>for {product.amount} month</span>
          </p>
          <SubscribeButton />
        </section>
        <Image
          alt="Girl coding"
          height="521"
          src="/images/avatar.svg"
          width="336"
        />
      </main>
    </>
  )
}

// O c√≥digo abaixo √© um c√≥digo SSR, que consiste em um c√≥digo que √© executado dentro do servidor Next antes da p√°gina ser renderizada
// Pode apenas ser utilizado dentro de pages
// Pode ser utilizada para que possamos realizar algo ANTES da p√°gina ser renderizada
// export const getServerSideProps: GetServerSideProps = async () => {
//   Code...
// }

// O c√≥digo abaixo √© um exemplo de uma aplica√ß√£o em SSG, que faz tudo oque o SSR faz, mas al√©m disso gera uma p√°gina HTML est√°tica que √© salva no servidor
// Pode apenas ser utilizada dentro de pages
// Pode ser utilizada apenas para p√°ginas com informa√ß√µes compartilhadas por todos os usu√°rios
export const getStaticProps: GetStaticProps = async () => {
  // Usamos retrieve quando queremos buscar apenas um pre√ßo, e passamos pro stripe o ID do pre√ßo que configuramos no stripe
  // Por mais que n√£o esteja no c√≥digo, podemos usar o expand para recebermos informa√ß√µes do produto, no caso o pre√ßo, como descri√ß√£o e afins
  // Isso pode ser acessado atrav√©s de price.product
  const price = await stripe.prices.retrieve('price_1KPEECH0GMCNHpYOZXGzKSg8');
  
  const product = {
    priceId: price.id,
    amount: new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(price.unit_amount / 100),
  }

  return {
    props: {
      product
    },
    // O reavalidate, diz quanto tempo em segundos o servidor mant√™m a p√°gina est√°tica, antes de a reavalidar, ou seja, de a renderizar do zero novamente
    revalidate: 60 * 60 * 24, // 24 hours  
  }
}
